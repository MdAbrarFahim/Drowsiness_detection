import cv2
import numpy as np
import dlib
from imutils import face_utils
import face_recognition

def compute(ptA, ptB):
    dist = np.linalg.norm(ptA - ptB)
    return dist

def blinked(a, b, c, d, e, f):
    up = compute(b, d) + compute(c, e)
    down = compute(a, f)
    ratio = up / (2.0 * down)
    if ratio > 0.25:
        return 2
    elif 0.21 < ratio <= 0.25:
        return 1
    else:
        return 0

def recognize_person(landmarks, frame):
    left = min(landmarks[:, 0])
    top = min(landmarks[:, 1])
    right = max(landmarks[:, 0])
    bottom = max(landmarks[:, 1])
    face_locations = [(top, right, bottom, left)]

    reference_images = {
    'Kobe': face_recognition.load_image_file('Kobe.jpg'),
    'Abrar': face_recognition.load_image_file('Abrar.jpg'),
    'Cena': face_recognition.load_image_file('Cena.jpg')
}

    reference_encodings = {}
    for name, image in reference_images.items():
        encoding = face_recognition.face_encodings(image)
        if encoding:
            reference_encodings[name] = encoding[0]

    unknown_encoding = face_recognition.face_encodings(frame, face_locations)

    recognized_person = "Unknown"
    if unknown_encoding:
        unknown_encoding = unknown_encoding[0]
        min_distance = float('inf')
        for name, ref_encoding in reference_encodings.items():
            distance = face_recognition.face_distance([ref_encoding], unknown_encoding)
            if distance < min_distance:
                min_distance = distance
                recognized_person = name

    return recognized_person

cap = cv2.VideoCapture(0)

detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor("shape_predictor_68_face_landmarks.dat")

sleep = 0
drowsy = 0
active = 0
status = ""
color = (0, 0, 0)

while True:
    frame = cap.read()
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    faces = detector(gray)

    for face in faces:
        x1 = face.left()
        y1 = face.top()
        x2 = face.right()
        y2 = face.bottom()

        face_frame = frame.copy()
        cv2.rectangle(face_frame, (x1, y1), (x2, y2), (0, 255, 0), 2)

        landmarks = predictor(gray, face)
        landmarks = face_utils.shape_to_np(landmarks)

        left_blink = blinked(landmarks[36], landmarks[37], landmarks[38], landmarks[41], landmarks[40], landmarks[39])
        right_blink = blinked(landmarks[42], landmarks[43], landmarks[44], landmarks[47], landmarks[46], landmarks[45])

        if left_blink == 0 or right_blink == 0:
            sleep += 1
            drowsy = 0
            active = 0
            if sleep > 6:
                status = "SLEEPING !!!"
                color = (255, 0, 0)

        elif left_blink == 1 or right_blink == 1:
            sleep = 0
            active = 0
            drowsy += 1
            if drowsy > 6:
                status = "Drowsy !"
                color = (0, 0, 255)

        else:
            drowsy = 0
            sleep = 0
            active += 1
            if active > 6:
                status = "Awake :)"
                color = (0, 255, 0)

        person_name = recognize_person(landmarks, frame)
        cv2.putText(frame, f"Person: {person_name}", (100, 150), cv2.FONT_HERSHEY_SIMPLEX, 1.2, color, 3)
        cv2.putText(frame, status, (100, 100), cv2.FONT_HERSHEY_SIMPLEX, 1.2, color, 3)

        for n in range(0, 68):
            (x, y) = landmarks[n]
            cv2.circle(face_frame, (x, y), 1, (255, 255, 255), -1)

    cv2.imshow("Result of detector", face_frame)
    cv2.imshow("Frame", frame)
    
    key = cv2.waitKey(1)
    if key == 27:
        break

cap.release()
cv2.destroyAllWindows()
